<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Operating System on VZstless</title>
    <link>https://vzstless.moe/tags/operating-system/</link>
    <description>Recent content in Operating System on VZstless</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>VZstless</copyright>
    <lastBuildDate>Mon, 28 Apr 2025 14:33:15 +0800</lastBuildDate>
    <atom:link href="https://vzstless.moe/tags/operating-system/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>OSTEP为什么好</title>
      <link>https://vzstless.moe/p/ostep%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A5%BD/</link>
      <pubDate>Mon, 28 Apr 2025 14:33:15 +0800</pubDate>
      <guid>https://vzstless.moe/p/ostep%E4%B8%BA%E4%BB%80%E4%B9%88%E5%A5%BD/</guid>
      <description>&lt;p&gt;断断续续把OSTEP看完了，最开始看内存虚拟化的时候弃掉了一段时间，后来又捡了回来，因为别的OS textbook太烂了😂&lt;br&gt;&#xA;为什么OSTEP好？说实话，免费反而是最后要提及的有点，除了美国那边课本死贵死贵之外感觉国内的课本基本上要么用二手要么直接下电子版的了。一本Operating System Concepts哪怕是国内的大黑书也要158一本，不过又有多少人会买呢？&lt;br&gt;&#xA;首先一个好的地方是这本书没有过分聚焦到COA或者ICS应当聚焦的部分，直截了当地告诉你操作系统在哪儿，解决了你在COA或者ICS中没碰见的什么问题。OSC和MOS两本书都是要先给你满嘴口水地讲COA和ICS中嚼烂的内容，估计也就学唐XX计组没学明白的人需要这些内容了吧&amp;hellip;&amp;hellip;当然，硬盘的基本原理它还是给你讲了讲，防止你文件系统直接抓瞎（但其实这个部分可以砍掉，既然你第一章推荐了csapp那这部分可以默认讲过）&lt;br&gt;&#xA;其次就是真实。告诉你历史上怎么做的，怎么演化成如今的样子的。几乎所有的示例都会附上对应的在真实世界中能用的API示例代码。这里的一个反例就是MOS，过分地“又臭又长”，而且示例代码还不那么make sense。重点是每章后方的参考文献都给了你阅读指导，告诉你你不仅应该看这本书，还应该再看看这些内容的相关一手消息。&lt;br&gt;&#xA;至于文风的幽默什么的，也在“真实”和“参考文献”面前不值一提了。既然一本书能够告诉你正确的案例为什么正确，错误的案例是怎么一步一步走向bug的，那你为什么还要选别人呢？OSDP书后的Minix代码已经在网上开源了，而OSDP在国内也停售很久了，再往后就是OSC，没了。交大的那本书还没推开，总之OSTEP从现在的视角看也许算是“独孤求败”的典型代表？&lt;br&gt;&#xA;OSTEP之后呢？其实你应该看看apue，水课或者别的时候翻翻看看，然后看看Great Ideas in Computer System Design，也是书后多次推荐的好文章。最后书后的minilab很多（也许近两年jyy就是受此启发把OSlab干掉了？），看看源码，再看看xv6-riscv，不想做实验看看源码也行，毕竟不是所有人都想做那样的脏活累活，不是吗？或者如果你真有兴趣可以看看分布式系统相关的内容，不过那部分太难了，我也没学多少，就不说了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>程序的开始与终止</title>
      <link>https://vzstless.moe/p/%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%80%E5%A7%8B%E4%B8%8E%E7%BB%88%E6%AD%A2/</link>
      <pubDate>Thu, 13 Mar 2025 17:07:52 +0800</pubDate>
      <guid>https://vzstless.moe/p/%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%BC%80%E5%A7%8B%E4%B8%8E%E7%BB%88%E6%AD%A2/</guid>
      <description>&lt;h2 id=&#34;main-函数与程序的启动&#34;&gt;main 函数与程序的启动&lt;/h2&gt;&#xA;&lt;p&gt;main没有原型，启用main需要一个特殊的启动流程&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;main is at 0x%lX&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;使用c89标准编译后的输出结果与readelf的entry point不同&lt;br&gt;&#xA;使用gdb，发现&lt;code&gt;_start&lt;/code&gt;，先跳转到&lt;code&gt;___start&lt;/code&gt;，启动&lt;code&gt;_exit&lt;/code&gt;和&lt;code&gt;__libc_init&lt;/code&gt;，然后跳入&lt;code&gt;main&lt;/code&gt;&lt;br&gt;&#xA;执行完程序内所有行为后回到&lt;code&gt;___start&lt;/code&gt;&lt;br&gt;&#xA;阅读&lt;code&gt;crt0.S&lt;/code&gt;发现内存布局和库函数相关的初始化数据（源实验环境为NetBSD）&lt;br&gt;&#xA;在&lt;code&gt;cc&lt;/code&gt;中可以使用&lt;code&gt;-e&lt;/code&gt;指定程序的入口函数&lt;br&gt;&#xA;在gdb中查看&lt;code&gt;$rip&lt;/code&gt;发现非法的地址访问，产生了段错误，当将这个指定的入口函数使用&lt;code&gt;exit()&lt;/code&gt;退出时程序段错误消失&lt;/p&gt;</description>
    </item>
    <item>
      <title>玩转虚拟内存</title>
      <link>https://vzstless.moe/p/%E7%8E%A9%E8%BD%AC%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</link>
      <pubDate>Fri, 07 Mar 2025 08:42:42 +0800</pubDate>
      <guid>https://vzstless.moe/p/%E7%8E%A9%E8%BD%AC%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/VictorZhangAI/memhack&#34;&gt;Source Code&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;看了jyy今年的虚拟内存，有感而发给GPT丢了几个prompt，产生了这些东西：&lt;/p&gt;&#xA;&lt;h2 id=&#34;mmap&#34;&gt;mmap&lt;/h2&gt;&#xA;&lt;p&gt;mmap() 是一个用于内存映射的syscall，可用于快速分配大段内存空间。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
