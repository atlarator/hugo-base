<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>PL on VZstless</title>
        <link>https://vzstless.moe/tags/pl/</link>
        <description>Recent content in PL on VZstless</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>VZstless</copyright>
        <lastBuildDate>Sun, 14 Sep 2025 02:59:24 +0000</lastBuildDate><atom:link href="https://vzstless.moe/tags/pl/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>C&#43;&#43;的那些事</title>
        <link>https://vzstless.moe/p/c-%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
        <pubDate>Sun, 14 Sep 2025 02:59:24 +0000</pubDate>
        
        <guid>https://vzstless.moe/p/c-%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
        <description>&lt;h3 id=&#34;内部细节&#34;&gt;内部细节
&lt;/h3&gt;&lt;p&gt;能const auto &amp;amp;就const auto &amp;amp;，能引用就引用&lt;/p&gt;
&lt;p&gt;vector：分配一大块连续的内存空间，每次空间不够用的时候把原有的空间翻倍进行扩容（这个过程中原有的元素会重新移位），对前插不友好故没有前插的实现
deque：分配一些较为平均且碎片化的空间并向这些空间的首个元素设置索引指针。每次插入时如果空间不够就再分配一小块空间，故对前插和后插都很友好，但是比vector慢
map：把每对键-值作为节点的一棵红黑树，所以map的key必须实现了＜的运算符重载
set：本质上是没有key的map
unordered_map：哈希表，所以key必须是可哈希化的。当load factor过大时会进行rehash重新分配哈希值
array：固定的连续空间
list：双链表（对，它的内部实现就是你理解的那样）&lt;/p&gt;
&lt;p&gt;多使用++it而不是it++，因为前缀是原地迭代，而后缀是先拷贝后迭代&lt;/p&gt;
&lt;p&gt;unique_ptr：不得拷贝
shared_ptr：可以共享资源且拥有一个计数器
weak_ptr：可以共享资源，只能和shared_ptr一起使用防止循环引用&lt;/p&gt;
&lt;h3 id=&#34;c11的新增内容&#34;&gt;C++11的新增内容：
&lt;/h3&gt;&lt;p&gt;auto类型推导，range-based for，右值引用&amp;amp;&amp;amp;和std::move()，constexpr，使用{}统一初始化，nullptr，enum class用于强类型枚举，无关操作系统的线程与并发库&amp;lt;thread&amp;gt;,&amp;lt;future&amp;gt;,&amp;lt;mutex&amp;gt;，可变参数模板，静态断言，控制特殊成员函数，更严格的对象语义检查，tuple，array，chrono&amp;hellip;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
